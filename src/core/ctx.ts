import { existsSync, mkdirSync, writeFileSync } from 'node:fs'
import { dirname, join } from 'node:path'
import { globSync } from 'fast-glob'
import { genRelativePath, pascalCase, requireJSON } from './utils'

export interface CustomConfig {
  dts?: string
}

export interface EasycomObject {
  name: string
  pattern: string
}

export interface ResolvedConfig extends Required<CustomConfig> {
  root: string
  easycom: EasycomObject[]
}

export const resolveEasycomRules = (root: string) => {
  const pagesJsonPath = join(root, 'src/pages.json')
  const pagesJson = requireJSON(pagesJsonPath)

  const customEasycom = pagesJson.easycom?.custom ?? {}
  const easycom: EasycomObject[] = []

  const autoScan = pagesJson.easycom?.autoscan ?? true

  if (autoScan) {
    for (const key in customEasycom) {
      if (Object.prototype.hasOwnProperty.call(customEasycom, key)) {
        const pattern = customEasycom[key]

        if (pattern.startsWith('@/')) {
          easycom.push({ name: key, pattern: pattern.replace('@/', 'src/') })
        } else if (pattern.startsWith('./')) {
          easycom.push({ name: key, pattern: pattern.replace('./', 'src/') })
        } else if (pattern.startsWith('../')) {
          easycom.push({ name: key, pattern: pattern.replace('../', '') })
        } else {
          easycom.push({ name: key, pattern: `node_modules/${pattern}` })
        }
      }
    }

    if (easycom.length === 0) {
      easycom.push({
        name: '^(.*)$',
        pattern: 'src/uni_modules/$0/components/$1/$1.vue',
      })
      easycom.push({
        name: '^(.*)$',
        pattern: 'src/components/$1/$1.vue',
      })
    }
  }

  return easycom
}

export const createContext = (config: CustomConfig) => {
  let resolvedConfig: ResolvedConfig

  const easycomMap = new Map<string, string>()

  const init = (root: string) => {
    resolvedConfig = {
      root: root,
      dts: config.dts || 'src/uniapp-easycom.d.ts',
      easycom: resolveEasycomRules(root),
    }
  }

  const scanEasyComponents = () => {
    const { root, easycom } = resolvedConfig

    for (const { name, pattern } of easycom) {
      // 将占位符转化为glob通配符，用于快速查找文件
      const globPattern = pattern.replace(/\$\d+/g, '*')
      const files = globSync(globPattern, {
        cwd: root,
      })

      // 将占位符转化为正则表达式，用于提取匹配项
      // $0作为通用占位符，用于匹配任意字符
      const regexp = new RegExp(
        pattern.replace('$0', '.*').replace(/\$\d+/g, '(.*)'),
      )
      for (const filename of files) {
        const matches = regexp.exec(filename)
        if (matches) {
          const [importUrl, ...matchNames] = matches

          let replaceIndex = 0
          let componentName = name
          componentName = componentName.replace(/(\(.*?\))/g, () => {
            return matchNames[replaceIndex++]
          })
          componentName = componentName.replace(/^\^/g, '')
          componentName = componentName.replace(/\$$/g, '')

          // 使用匹配模式生成组件路径，用于校验组件是否满足匹配模式
          const componentUrl = pattern.replace(/\$\d+/g, (m) => {
            // 提取匹配位置
            const [, indexStr] = /\$(\d+)/.exec(m) ?? ['', '1']
            const index = Number.parseInt(indexStr) - 1
            return index === -1 ? '.*' : matchNames[index]
          })

          const componentRegexp = new RegExp(componentUrl)
          if (componentRegexp.test(importUrl)) {
            easycomMap.set(componentName, importUrl)
          }
        }
      }
    }
  }

  const generateTypeDeclarations = () => {
    const dtsDir = dirname(resolvedConfig.dts)

    const components: string[] = []
    for (const [name, url] of easycomMap.entries()) {
      const relativePath = genRelativePath(dtsDir, url)
      components.push(
        `    ${pascalCase(name)}: (typeof import('${relativePath}'))['default']`,
      )
    }

    const content = [
      '/* eslint-disable */',
      '/* prettier-ignore */',
      '// @ts-nocheck',
      '// noinspection JSUnusedGlobalSymbols',
      '// Generated by uniapp-easycom-types',
      '// biome-ignore lint: disable',
      'export {}',
      "declare module 'vue' {",
      '  export interface GlobalComponents {',
      ...components,
      '  }',
      '}',
    ]

    const filename = join(resolvedConfig.root, resolvedConfig.dts)
    const filenameDir = dirname(filename)
    if (!existsSync(filenameDir)) {
      mkdirSync(filenameDir, { recursive: true })
    }
    writeFileSync(filename, content.join('\n'), 'utf-8')
  }

  return {
    init,
    scanEasyComponents,
    generateTypeDeclarations,
  }
}
